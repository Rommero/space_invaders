(function() {
  var ResourceLoader,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  ResourceLoader = (function(_super) {
    __extends(ResourceLoader, _super);

    function ResourceLoader(imageList, callback) {
      var check, imageData, _i, _len;
      if (_.isString(imageList)) {
        imageList = [
          {
            url: imageList,
            id: imageList
          }
        ];
      }
      if (_.isArray(imageList)) {
        check = true;
        for (_i = 0, _len = imageList.length; _i < _len; _i++) {
          imageData = imageList[_i];
          check *= _.isObject(imageData) && _.has(imageData, 'url');
        }
        if (!check) {
          throw "ResourceLoader :: ResourceLoader accepts only String or String[]";
        }
      }
      this.images = {};
      this.loadImages(imageList, callback);
    }

    ResourceLoader.prototype.loadImages = function(imageList, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return async.each(imageList, (function(_this) {
        return function(imageData, eCallback) {
          var img;
          img = new Image();
          img.onload = function() {
            _this.images[imageData.id || imageData.url] = img;
            return eCallback(null);
          };
          return img.src = imageData.url;
        };
      })(this), (function(_this) {
        return function(err) {
          callback();
          return _this.emit("ready");
        };
      })(this));
    };

    ResourceLoader.prototype.get = function(imageId) {
      if (!_.has(this.images, imageId)) {
        throw "ResourceLoader :: Image not loaded";
      }
      return this.images[imageId];
    };

    return ResourceLoader;

  })(EventEmitter2);

  window.ResourceLoader = ResourceLoader;

}).call(this);

(function() {
  var SpaceInvadersGame,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  SpaceInvadersGame = (function(_super) {
    var BG_COLOR, CANVAS_HEIGHT, CANVAS_WIDTH, FOOTER_HEIGHT, GAME_FIELD, HEADER_HEIGHT, INVADER_SPRITES, REDRAW_RATE, SIDE_OFFSET, getJsFileDir;

    __extends(SpaceInvadersGame, _super);

    CANVAS_HEIGHT = 640;

    CANVAS_WIDTH = 480;

    INVADER_SPRITES = "sprites/invaders.png";

    BG_COLOR = "#000";

    REDRAW_RATE = 60;

    HEADER_HEIGHT = 100;

    FOOTER_HEIGHT = 75;

    SIDE_OFFSET = 25;

    GAME_FIELD = {
      x: HEADER_HEIGHT,
      y: SIDE_OFFSET,
      width: CANVAS_WIDTH - SIDE_OFFSET * 2,
      height: CANVAS_HEIGHT - HEADER_HEIGHT - FOOTER_HEIGHT
    };

    function SpaceInvadersGame(_at_dest) {
      var currentDir;
      this.dest = _at_dest;
      currentDir = getJsFileDir("SpaceInvaders.js");
      this.resources = new ResourceLoader([
        {
          url: currentDir + INVADER_SPRITES,
          id: INVADER_SPRITES
        }
      ], (function(_this) {
        return function() {
          return _this.init();
        };
      })(this));
    }

    SpaceInvadersGame.prototype.init = function() {
      $(this.dest).append("<canvas id='SpaceInvadersGame'></canvas>");
      $("#SpaceInvadersGame").attr("height", CANVAS_HEIGHT);
      $("#SpaceInvadersGame").attr("width", CANVAS_WIDTH);
      $("#SpaceInvadersGame").css({
        "background-color": BG_COLOR
      });
      this.canvas = document.getElementById("SpaceInvadersGame");
      this.ctx = this.canvas.getContext("2d");
      return this.startGame();
    };

    SpaceInvadersGame.prototype.invade = function() {
      this.invaders = [];
      console.log(GAME_FIELD.x, GAME_FIELD.y);
      return this.invaders.push(new Invader(this.resources.get(INVADER_SPRITES), Invader.INVADER_TYPE_SMALL, GAME_FIELD.x + 10, GAME_FIELD.y + 10));
    };

    SpaceInvadersGame.prototype.startGame = function() {
      var gameStep;
      this.invade();
      this.frame = 0;
      this.animationFrame = 0;
      gameStep = (function(_this) {
        return function() {
          _this.update();
          _this.render();
          return window.requestAnimationFrame(gameStep, _this.canvas);
        };
      })(this);
      return window.requestAnimationFrame(gameStep, this.canvas);
    };

    SpaceInvadersGame.prototype.clearGameField = function() {
      console.log(GAME_FIELD.x, GAME_FIELD.y, GAME_FIELD.width, GAME_FIELD.height);
      return this.ctx.clearRect(GAME_FIELD.x, GAME_FIELD.y, GAME_FIELD.width, GAME_FIELD.height);
    };

    SpaceInvadersGame.prototype.update = function() {
      var invader, _i, _len, _ref, _results;
      this.frame++;
      if (this.frame % REDRAW_RATE !== 0) {
        return;
      }
      this.clearGameField();
      this.animationFrame++;
      _ref = this.invaders;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        invader = _ref[_i];
        _results.push(invader.update(this.animationFrame));
      }
      return _results;
    };

    SpaceInvadersGame.prototype.render = function() {
      var invader, _i, _len, _ref;
      _ref = this.invaders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        invader = _ref[_i];
        this.ctx.clearRect(invader.x, invader.y, invader.w, invader.h);
      }
      return this.invaders[0].render(this.ctx);
    };

    getJsFileDir = function(filename) {
      var reg;
      reg = ".*" + filename + ".*";
      return $("script[src]").filter(function() {
        return this.src.match(new RegExp(reg));
      }).last().attr("src").split('?')[0].split('/').slice(0, -1).join('/') + '/';
    };

    return SpaceInvadersGame;

  })(EventEmitter2);

  window.SpaceInvadersGame = SpaceInvadersGame;

}).call(this);

(function() {
  var Invader, Sprite,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Sprite = (function() {
    function Sprite(_at_img, _at_spriteX, _at_spriteY, _at_w, _at_h, _at_x, _at_y) {
      this.img = _at_img;
      this.spriteX = _at_spriteX != null ? _at_spriteX : 0;
      this.spriteY = _at_spriteY != null ? _at_spriteY : 0;
      this.w = _at_w != null ? _at_w : 0;
      this.h = _at_h != null ? _at_h : 0;
      this.x = _at_x != null ? _at_x : 0;
      this.y = _at_y != null ? _at_y : 0;
    }

    Sprite.prototype.render = function(ctx) {
      console.log(this.spriteX, this.spriteY, this.w, this.h, this.x, this.y, this.w, this.h);
      return ctx.drawImage(this.img, this.spriteX, this.spriteY, this.w, this.h, this.x, this.y, this.w, this.h);
    };

    return Sprite;

  })();

  window.Sprite = Sprite;

  Invader = (function(_super) {
    var ANIMATION_STEP_DURATION, DEFAULT_ANIMATION_STEP, INITIAL_VELOCITY, INVADER_HEIGHT, INVADER_WIDTH;

    __extends(Invader, _super);

    INVADER_WIDTH = 50;

    INVADER_HEIGHT = 35;

    Invader.INVADER_TYPE_LARGE = 2;

    Invader.INVADER_TYPE_MEDIUM = 1;

    Invader.INVADER_TYPE_SMALL = 0;

    DEFAULT_ANIMATION_STEP = 0;

    ANIMATION_STEP_DURATION = 1;

    INITIAL_VELOCITY = {
      x: INVADER_WIDTH / 2,
      y: 0
    };

    function Invader(_at_img, type, _at_x, _at_y) {
      var types;
      this.img = _at_img;
      this.x = _at_x;
      this.y = _at_y;
      this.animationStep = 0;
      types = [Invader.INVADER_TYPE_SMALL, Invader.INVADER_TYPE_MEDIUM, Invader.INVADER_TYPE_LARGE];
      if (!(types.indexOf(type) >= 0)) {
        console.log(types);
        type = Invader.INVADER_TYPE_SMALL;
      }
      Invader.__super__.constructor.call(this, this.img, this.animationStep * INVADER_WIDTH, type * INVADER_HEIGHT, INVADER_WIDTH, INVADER_HEIGHT, this.x, this.y);
    }

    Invader.prototype.render = function(ctx) {
      return Invader.__super__.render.call(this, ctx);
    };

    Invader.prototype.update = function(animationFrame) {
      this.updateVelocity(animationFrame);
      this.x += this.velocity.x;
      this.y += this.velocity.y;
      if (animationFrame % ANIMATION_STEP_DURATION !== 0) {
        return;
      }
      this.spriteX = this.animationStep * INVADER_WIDTH;
      return this.animationStep = 1 - this.animationStep;
    };

    Invader.prototype.updateVelocity = function(animationFrame) {
      return this.velocity = INITIAL_VELOCITY;
    };

    return Invader;

  })(Sprite);

  window.Invader = Invader;

}).call(this);

//# sourceMappingURL=data:application/json;base64,